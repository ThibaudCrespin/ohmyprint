#!/bin/bash

set -o nounset
set -o errexit

# Reset in case getopts has been used previously in the shell.
OPTIND=1

# Common operations
initialize() {
    down
    build
    start
    install
    populate
    docker-compose ps
}

build() {
    docker-compose build
}

start() {
    docker-compose up -d --remove-orphans
    sleep 1
    docker-compose ps
}

install() {
    installBack
    installFront
}

installBack() {
    docker-compose exec -T --user www-data app bin/console doctrine:database:create --if-not-exists
}

installFront() {
    docker-compose exec front bash -c "yarn run build"
}

serveFront() {
    docker-compose exec front bash -c "yarn run start"
}

populate() {
    docker-compose exec app -T --user www-data bin/console doctrine:fixtures:load -n
}

stop() {
    docker-compose stop
}

down() {
    docker-compose down --remove-orphans
}

# Usage info
show_help() {
cat << EOF
Usage:  ${0##*/} [COMMAND]

Commands:
  build            Build docker stack
  initialize       Start the project no matter what state it is in
  start            Start docker containers
  install          Run app installation scripts
  installFront     Run front app installation scripts
  installBack      Run back app installation scripts
  populate         Load data fixtures in app
  stop             Stop docker containers
  down             Remove docker containers
  serveFront            Serve Angular files for local dev
EOF
}

# Get cli options
while getopts "he:" opt; do
  case $opt in
    h)
        show_help
        exit 0
        ;;
    e)
        env=".$OPTARG"
        ;;
    *)
        show_help >&2
        exit 1
        ;;
  esac
done

# Shift off the options and optional --.
shift "$((OPTIND-1))"

# Show help if no argument was supplied
if [ $# -eq 0 ]
  then
    show_help >&2
    exit 1
fi

case "$1" in
 build)
        build
        ;;
 initialize)
        initialize
        ;;
 start)
        start
        ;;
 stop)
        stop
        ;;
 down)
        down
        ;;
 restart)
        stop
        start
        ;;
 install)
        install
        ;;
 installFront)
        installFront
        ;;
 installBack)
        installBack
        ;;
 serveFront)
        serveFront
        ;;
 populate)
        populate
        ;;
 *)
        show_help >&2
        exit 1
esac

exit 0
